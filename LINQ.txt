LINQ - Language Integrated Queries
Запросы данных языком программирования

Есть разновидности LINQ для коллекций (IEnumerable) и Entity (IQueryable)

Особенности:
- LINQ запрос можно сохранить в переменной, сам запрос это "правило" и не
  инициализирует обращение к БД
- LINQ-to-Entity использует присоединённый режим, т.е. каждый запрос отправляется к БД,
  а не к "скаченой" коллекции
- Выполнение запроса выполняется шагами:
  1. вызов агрегатора (.Count(), .Max() и тд.)
  2. вызов явного преобразования (.ToList(), .ToArray(), и тд.)
  3. запуск цикла по итеравнному запросу (foreach)

- Фильтрация (.Where) лучше задействовать с индексованными полями, и первичным ключом
  (который автоматически индексируется)
- Инструкция .Select это преобразователь, а не запуск запроса


.AsEnumerable():
Все инструкции, которые принадлежат IQueryable, служат для подготовки запроса SQL
Например, инструкция:
   IQueryable query = dataContext.Departments.OrderBy(d => d.Name)
НЕ отправляет запрос к БД, только собирает инструкции для построение запроса:
   SELECT * FROM Departments d ORDER BY d.Name

Сам запрос выполняется при обращении к переменной query в цикле или агрегаторе и тд.

Инструкция .AsEnumerable() отсоединяет часть, которая влияет на SQL, и результат,
которая будет с коллекцией (со стороны .NET)

query.Select(d => d.Name) - добавление к SQL, который изменит запрос
SELECT d.Name FROM Departments d ORDER BY d.Name

query.AsEnumerable().Select(d => d.Name) - "разделение", запрос остается
SELECT * FROM Departments d ORDER BY d.Name
он выполняетсяа потом с его результата перебирания формируется выборка .Select(d => d.Name) -
коллекция строк - название отдела
